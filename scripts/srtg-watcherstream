#!/usr/bin/python3

"""
Copyright 2020 Surrogate Ltd.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import json
import requests
import toml
import os.path
import os
import sys
import subprocess
import re
import time
import shutil
import inotify.adapters
import threading
import logging
import glob
import argparse
import signal
import multiprocessing

logging.getLogger().setLevel(logging.INFO)

current_ge_file = "/var/lib/srtg/current_game_engine"
conf_dir = "/etc/srtg"
conf_file = "srtg.toml"

HLS_CACHE_DIR = "/tmp/srtg_hls"

MASTER_URL = "https://g9b1fyald3.execute-api.eu-west-1.amazonaws.com/master"
STAGING_URL = "https://y462n3eq4i.execute-api.eu-west-1.amazonaws.com/staging"
DEV_URL = "https://jakmst7pkg.execute-api.eu-west-1.amazonaws.com/dev"

UPLOAD_RETRIES = 3

class UploadException(Exception):
    pass

def parse_separate_ge_config(ge_name):
    ge_conf_path = f"{conf_dir}/game_engines/{ge_name}.toml"
    if not os.path.isfile(ge_conf_path):
        raise RuntimeError(f"Game engine config {ge_conf_path} doens't exist")
    conf = toml.load(ge_conf_path)
    return conf["game_engine"]


def parse_main_config():
    conf_path = f"{conf_dir}/{conf_file}"
    if not os.path.isfile(conf_path):
        raise RuntimeError("Main config doens't exist")
    conf = toml.load(conf_path)
    return conf


def get_ge_config():
    if os.path.exists(current_ge_file):
        with open(current_ge_file) as f:
            return parse_separate_ge_config(f.readline().rstrip())
    else:
        return parse_main_config()["game_engine"]


def fetch_details():
    conf = get_ge_config()
    if "id" in conf:
        id = conf["id"]
        token = conf["token"]
    else:
        parts = conf["token"].split("/")
        if len(parts) == 2:
            id = parts[0]
            token = parts[1]
        else:
            logging.error("Token is malformed")
            return 1

    ge_url = conf["url"]
    if "dev" in ge_url:
        base_url = DEV_URL
    elif "staging" in ge_url:
        base_url = STAGING_URL
    else:
        base_url = MASTER_URL

    url = f"{base_url}/admin/games/{id}/robotConfig"
    headers = {"Robot-Token": token}

    response = requests.get(url, headers=headers, timeout=20)

    payload = json.loads(response.content.decode("utf-8"))

    if response.status_code == 200:
        return payload["result"]["streamInput"]
    else:
        raise RuntimeError("Failed to get stream config")

def upload_segment(push_url, path, filename, headers):
    time.sleep(0.1) # Make sure main.m3u8 is updated as well
    retry_wait_time = 1
    retry_wait_increment = 3
    for i in range(UPLOAD_RETRIES):
        url = f"{push_url}/{filename}"
        filepath = f"{path}/{filename}"
        main_url = f"{push_url}/main.m3u8"
        main_filepath = f"{path}/main.m3u8"

        with open(main_filepath, "r") as playlist:
            main_data = playlist.read()

        logging.info(f"Uploading segment {url}")
        response = requests.put(
            url, data=open(filepath, "rb"), headers=headers, timeout=20)
        if response.status_code == 403:
            logging.error(f"Forbidden, fetching new push url")
            raise UploadException()
        elif response.status_code != 200:
            logging.error(f"Failed to upload segment, status: {response.status_code}")
            time.sleep(retry_wait_time)
            retry_wait_time = retry_wait_time + retry_wait_increment * i
            continue

        response = requests.put(
            main_url, data=main_data, headers=headers, timeout=20)
        if response.status_code == 403:
            logging.error(f"Forbidden, fetching new push url")
            raise UploadException()
        elif response.status_code != 200:
            logging.error(f"Failed to upload segment, status: {response.status_code}")
            time.sleep(retry_wait_time)
            retry_wait_time = retry_wait_time + retry_wait_increment * i
            continue

        os.remove(filepath)
        return

def inotify_check(stop_event, mode):
    counter = 0
    fails = 0
    while True:
        logging.info("(Re)initializing inotify..")

        stream_info = fetch_details()
        push_url = stream_info["url"][: stream_info["url"].rfind("/")]

        headers = {
            "User-Agent": stream_info["token"],
            "Content-Type": "binary/octet-stream",
        }

        files = glob.glob(f"{HLS_CACHE_DIR}/*")
        for file in files:
            os.remove(file)
        try:
            i = inotify.adapters.Inotify()
            i.add_watch(HLS_CACHE_DIR)
            for event in i.event_gen(yield_nones=False, timeout_s=10):

                if stop_event.is_set():
                    logging.info("Stopping uploader...")
                    return
                (_, type_names, path, filename) = event

                logging.info(f"Iterating through events - Type Names: {type_names}, path: {path}, filename: {filename}")

                if ("IN_MODIFY" in type_names and filename.endswith("ts")):
                    try:
                        upload_segment(push_url, path, filename, headers)
                    except UploadException:
                        break
                    except FileNotFoundError as e:
                        logging.error(f"Failed to upload segment: file not found")
                        continue
                    fails = 0
                    counter = counter + 1
                    if counter == 10:
                        logging.info("Uploaded 10 segments")
                        counter = 0
            i.remove_watch(HLS_CACHE_DIR)
            fails = fails + 1
            if stop_event.is_set():
                logging.info("Stopping uploader..")
                return
            elif fails > 2 and mode != "obs":
                raise Exception("Segments are not generated, exiting..")

        except Exception as e:
            logging.exception(f"Uploader exception")
            if RETRY_WITHOUT_EXIT:
                continue
            else:
                os._exit(1)
        if mode == "obs":
            logging.info("Waiting for segments from OBS..")

def check_is_h264(dev_path):
    ffprobe_cmd = (
        f"/usr/bin/ffprobe -show_streams {dev_path} 2>&1"
        f" | grep codec_name")

    result = subprocess.check_output(ffprobe_cmd, shell=True).decode('utf-8')
    match = re.search(r'^codec_name=(.*)$', result)
    codec = match.group(1)
    logging.info(f"Matched {codec}")
    if codec == "h264":
        return True

    return False

def some_audio_dev_exists():
    result = subprocess.run(["arecord", "-l"], capture_output=True, text=True).stdout
    logging.info(f"audio input devices:\n {result}")
    if result.find("card") == -1:
        return False
    return True

def run_ffmpeg(conf):
    ffmpeg_binary = "srtg-ffmpeg" if shutil.which("srtg-ffmpeg") else "ffmpeg"

    ffmpeg_audio_conf = ""
    try:
        for source in conf["sources"]:
            if source["kind"] == "audio" and some_audio_dev_exists():
                ffmpeg_audio_conf = " -thread_queue_size 1024 -f alsa -i default"
    except KeyError:
        pass

    dev_path = "/dev/video20"

    codec_line = ""
    if check_is_h264(dev_path):
        logging.info("Sending pre-encoded H.264 stream")
        codec_line = "-c:v copy"
    else:
        logging.info("Encoding raw stream..")

    ffmpeg_command = (
        f"{ffmpeg_binary}"
        f" -loglevel repeat+level+warning"
        f"{ffmpeg_audio_conf}"
        f" -thread_queue_size 1024"
        f" -f v4l2"
        f" -framerate 30"
        f" -analyzeduration 50000000"
        f" -probesize 50000000"
        f" -i {dev_path}"
        f" {codec_line}"
        f" -hls_time 3" f" -hls_allow_cache 0"
        f" -hls_flags program_date_time"
        f" -strftime 1"
        f" -f hls"
        f" {HLS_CACHE_DIR}/main.m3u8"
    )

    while True:
        ret = os.system(ffmpeg_command)
        if not RETRY_WITHOUT_EXIT:
            break
    os.kill(os.getppid(), signal.SIGTERM)

def run_v4l2rtspserver(conf):
    video_dev = -1
    for entry in conf["sources"]:
        if entry["kind"] == "video" and "v4l2_encoded_loopback_dev" in entry["video_params"]:
            video_dev = entry["video_params"]["v4l2_encoded_loopback_dev"]
            break

    if video_dev == -1:
        logging.error("Streamer is not configured to output watcher stream, exiting")
        return 1

    while True:
        ret = os.system(f"v4l2rtspserver /dev/video{video_dev}")
        if not RETRY_WITHOUT_EXIT:
            break
    os.kill(os.getppid(), signal.SIGTERM)

RETRY_WITHOUT_EXIT = False if os.system("systemctl --no-pager > /dev/null 2>&1") == 0 else True

conf = parse_main_config()

files = glob.glob(f"{HLS_CACHE_DIR}/*")
for file in files:
    os.remove(file)

mode = "default"
if "watcherstream_mode" in conf:
    mode = conf["watcherstream_mode"]

logging.info(f"Running in {mode} mode")
run_upload = False if mode == "rtsp" else True

if run_upload:
    stream_info = fetch_details()
    while stream_info["type"] == "noStream":
        logging.warning("Watcher stream is disabled from admin panel, checking in 1min..")
        time.sleep(60)
        stream_info = fetch_details()

    stop_event = threading.Event()
    inotify_thread = threading.Thread(target=inotify_check, args=[stop_event, mode])
    inotify_thread.start()

exit_now = False
p = None
ret = 0

if mode == "obs":
    logging.info("Running in OBS mode. Waiting for stream..")
elif mode == "rtsp":
    p = multiprocessing.Process(target=run_v4l2rtspserver, args=(conf,))
    p.start()
elif mode == "default":
    p = multiprocessing.Process(target=run_ffmpeg, args=(conf,))
    p.start()
else:
    logging.error(f"Unknown mode: {conf['watcherstream_mode']}, exiting..")
    exit_now = True

if not exit_now:
    sig = signal.sigwait([signal.SIGTERM, signal.SIGINT])
    logging.info(f"Received signal {sig}, exiting")

if p is not None:
    p.terminate()
    ret = p.exitcode

logging.info("Stopping..")
if run_upload:
    stop_event.set()
    inotify_thread.join()
sys.exit(ret)
